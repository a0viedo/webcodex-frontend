{"version":3,"file":"static/webpack/static/development/pages/analyze.js.9c4d18d8b1af5ee65af9.hot-update.js","sources":["webpack:///./pages/analyze.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'next/router';\nimport Layout from '../components/layout';\nimport TreeMap from '../components/tree-map-chart';\nimport ColorBar from '../components/color-bar';\nimport LighthouseReport from '../components/lighthouse-report';\n\nimport MultiLineChart from '../components/multi-line-chart';\nimport HorizontalBarChart from '../components/horizontal-bar-chart';\nimport Loading from '../components/loading';\nimport * as fetch from 'isomorphic-unfetch';\nimport { statsAPI as API_URL, optimizeImageURL, screenshotAPI } from '../components/api-url';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faCircle } from '@fortawesome/free-solid-svg-icons';\n\nasync function getData(url) {\n  try {\n    const response = await fetch(\n      url,\n      { mode: 'cors' }\n    );\n    return response.json();\n  } catch(err) {\n    console.log('failed');\n    return Promise.reject(err);\n  }\n}\n\nasync function getColorData(domain) {\n  return getData(`${API_URL}/color-detection/${domain}`);\n}\n\nasync function getColorBarData(domain) {\n  return getData(`${API_URL}/color-bar/${domain}`);\n}\n\nasync function getAlexaRanking(domain) {\n  return getData(`${API_URL}/alexa-ranking/${domain}`);\n}\n\nfunction getCSSStats(domain) {\n  return getData(`${API_URL}/css-stats/${domain}`);\n}\nfunction getLighthouseReport(domain) {\n  return getData(`${API_URL}/lighthouse/${domain}`);\n}\nfunction getHTMLStats(domain) {\n  return getData(`${API_URL}/html-stats/${domain}`);\n}\nfunction getTechnologiesDetected(domain) {\n  return getData(`${API_URL}/technology-detection/${domain}`);\n}\nfunction getHTTPHeaders(domain) {\n  return getData(`${API_URL}/http-headers/${domain}`);\n}\n\nclass Analyze extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      htmlStatsLoading: false,\n      colorLoading: false,\n      alexaRankLoading: false,\n      cssAnalysisLoading: true,\n      lighthouseLoading: true,\n      colorBarLoading: false\n    };\n\n    if(this.props.router.query.url) {\n      this.state = {\n        domain: this.props.router.query.url,\n        submitted: true,\n        colorBarLoading: true,\n        htmlStatsLoading: true,\n        colorDataLoading: true,\n        alexaRankLoading: true,\n        cssAnalysisLoading: true,\n        lighthouseReportLoading: true,\n        technologiesLoading: true,\n        lighthouseReport: null,\n        htmlStats: null,\n        cssStats: null,\n        colorBarData: null,\n        technologies: null,\n        alexaRank: null\n      };\n      this.getMetrics();\n    }\n  }\n\n  async getMetrics() {\n    console.log('getData', this.state.domain);\n\n    const retrievalFunctions = [\n      {\n        fn: getColorData,\n        map: { colors: 'colorData', screenshotURL: 'screenshotURL', optimizedScreenshotURL: 'optimizedScreenshotURL'},\n        loadingProp: 'colorDataLoading'\n      },\n      {\n        fn: getColorBarData,\n        map: { _: 'colorBarData'},\n        loadingProp: 'colorBarLoading'\n      },\n      {\n        fn: getAlexaRanking,\n        map: { alexaRank: 'alexaRank'},\n        loadingProp: 'alexaRankLoading'\n      },\n      {\n        fn: getCSSStats,\n        map: { _: 'cssStats'},\n        loadingProp: 'cssStatsLoading'\n      },\n      {\n        fn: getLighthouseReport,\n        map: { lighthouse: 'lighthouseReport', viewReportURL: 'lighthouseReportURL'},\n        loadingProp: 'lighthouseReportLoading'\n      },\n      {\n        fn: getTechnologiesDetected,\n        map: { _: 'technologies'},\n        loadingProp: 'technologiesLoading'\n      },\n\n      // {\n      //   fn: getHTMLStats,\n      //   map: { htmlStats: this.mapHTMLData.bind(this) },\n      //   loadingProp: 'htmlStatsLoading'\n      // },\n    // }, {\n    //   fn: getHTTPHeaders,\n    //   stateProp: 'httpHeaders'\n    // }\n    ];\n\n    retrievalFunctions.forEach(({ fn, stateProp, map, loadingProp }) => {\n      fn(this.state.domain).then(data => {\n        console.log('got data back for', loadingProp);\n        console.log(data);\n\n        const newState = { [loadingProp]: false };\n        for(const [key, value] of Object.entries(map)) {\n          if(key === '_') {\n            newState[value] = data;\n            break;\n          }\n          if(typeof value === 'function') {\n            newState[key] = value(data);\n          } else {\n            newState[value] = data[key];\n          }\n        }\n\n        this.setState(newState);\n      }).catch(err => {\n        console.log(`there was an error while getting ${stateProp}`, err);\n        // TODO: handle some error to display in the UI\n        this.setState({ [loadingProp]: false });\n      });\n    });\n\n    getHTMLStats(this.state.domain).then(data => {\n      const tagData = Object.assign({}, data);\n      delete tagData.attributes;\n\n      this.setState({\n        htmlRawData: Object.assign({}, data),\n        htmlStats: Object.entries(tagData).map(([key, value]) => ({ value: value.count, name: key })),\n        htmlStatsLoading: false,\n        htmlAttributesData: Object.entries(data.attributes).map(([key, value]) => ({ value, name: key }))\n      });\n    }).catch(e => {\n      console.log('there was an error while loading html stats');\n      // TODO: handle error\n      this.setState({ htmlStatsLoading: false });\n    });\n  }\n\n  componentDidMount() {\n    console.log('component did mount', this.props.router.query);\n  }\n\n  handleChange(event) {\n    this.setState({ domain: event.target.value });\n  }\n\n  handleAttributesDropdownChange(event) {\n    console.log('handleAttributesDropdownChange', event.target.value);\n    let data;\n    if(event.target.value === 'all') {\n      data = Object.entries(this.state.htmlRawData.attributes).map(([key, value]) => ({ value, name: key }));\n    } else {\n      data = Object.entries(this.state.htmlRawData[event.target.value].attributes).map(([key, value]) => ({ value, name: key }));\n    }\n    this.setState({\n      htmlAttributesData: data\n    });\n  }\n\n  mapHTMLData(data){\n    // TODO: this shouldn't use setState\n    this.setState({\n      htmlRawData: Object.assign({}, data)\n    });\n    delete data.attributes;\n    return Object.entries(data).map(([key, value]) => ({ value: value.count, name: key }));\n  }\n\n  load() {\n    this.props.router.push('/analyze?url='+ this.state.domain);\n    this.setState({\n      submitted: true,\n      colorBarLoading: true,\n      htmlStatsLoading: true,\n      colorDataLoading: true,\n      alexaRankLoading: true,\n      cssAnalysisLoading: true,\n      lighthouseReportLoading: true,\n      technologiesLoading: true,\n      lighthouseReport: null,\n      htmlStats: null,\n      cssStats: null,\n      colorBarData: null,\n      technologies: null,\n      alexaRank: null\n    });\n    this.getMetrics();\n  }\n\n  keyPressed(event) {\n    if (event.key === 'Enter') {\n      this.load();\n    }\n  }\n\n  selectElem(){\n\n  }\n\n  render(){\n\n    return <Layout title='Analyze your website'>\n      <div className=\"background-rect\"></div>\n      <div className=\"columns is-centered is-multiline\">\n        <div className=\"column is-three-quarters first-section-container\">\n          <div className=\"columns is-vcentered is-centered\">\n            <div className=\"column is-half\">\n              <div className=\"columns is-centered is-vcentered is-multiline\">\n                <div className=\"column is-full\">\n                  <h1 className=\"title is-1\">webcodex.dev</h1>\n                  <span className=\"subtitle is-5\">\n                    Discover what lays behind the face of your favourite websites and graphics that represents everything\n                  </span>\n                </div>\n                <div className=\"column is-full\">\n                  <div className=\"columns is-centered is-vcentered is-multiline\">\n                    <div className=\"column has-text-centered is-two-thirds\">\n                      <input className=\"domain-input\" type=\"text\" value={this.state.domain} onChange={ e => this.handleChange(e) } onKeyPress={(e) => this.keyPressed(e)}></input>\n                    </div>\n                    <div className=\"column is-narrow\">\n                      <button className=\"btn-no-style\" onClick={ () => this.load()}>\n                        <span className=\"fa-layers fa-stack fa-fw fa-2x input-icon-btn\">\n                          <FontAwesomeIcon icon={faCircle} size=\"2x\" color=\"white\" />\n                          <FontAwesomeIcon icon={faSearch} size=\"1x\" color=\"black\" flip=\"horizontal\"/>\n                        </span>\n                      </button>\n                    </div>\n                    <div className=\"column has-text-centered is-two-thirds\">\n                      {\n                        this.state.domain && this.state.submitted && this.state.technologies\n                          ? <span>The website is built with {this.state.technologies.map((x, i) => i === this.state.technologies.length - 1 ? ` and ${x}` : this.state.technologies.length - 2 ? `${x} `: `${x}, `)}</span>\n                          : null\n                      }\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"column is-half\">\n              <div className=\"columns has-text-centered is-centered is-vcentered is-multiline\">\n                <div className=\"column is-one-quarter\">\n                </div>\n                <div className=\"column is-two-thirds\">\n                  {\n                    this.state.submitted && this.state.domain\n                      ? <img className=\"screenshot-img\" ></img>\n                      : null\n                  }\n                </div>\n                <div className=\"column is-one-quarter\">\n                </div>\n                <div className=\"column is-two-thirds\">\n                  {\n                    this.state.screenshotURL ? <span className=\"screenshot-footer\"><a target=\"_blank\" href={this.state.screenshotURL}>view fullscreen screenshot</a></span>\n                      : null\n                  }\n\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* TODO: make graphs width dynamic */}\n      <div className=\"columns is-centered is-multiline\">\n        {\n          this.state.submitted ?\n            <div className=\"column is-three-quarters stats-section-container\">\n              <div className=\"columns is-centered is-multiline\">\n\n                {\n                  this.state.submitted ?\n                    <div className=\"column is-one-quarter has-text-right\">\n                      <div className=\"table-of-contents\">\n                        <h2 className=\"is-size-2 nav-domain\">{ this.state.domain}</h2>\n                        <ul>\n                          {/* <li className=\"\">\n                  <a href=\"#html\" className=\"is-size-5 nav-link\">HTML</a>\n                  <div className=\"nav-section-container\">\n                    <ul className={`nav-section-flex ${this.state.navSectionActive !== 'html' ? 'collapsed' : ''}`}>\n                      <li><a href=\"#tags-ocurrence\" className=\"is-size-6 nav-link\">1. Tags ocurrence</a></li>\n                      <li>2. Attributes ocurrence</li>\n                    </ul>\n\n                    <a href=\"#css\" className=\"is-size-5 nav-link\" onClick={ () => this.setState({navSectionActive: 'css'})}>CSS</a>\n                    <ul className={`nav-section-flex ${this.state.navSectionActive !== 'css' ? 'collapsed' : ''}`}>\n\n                      <li>1. Color detection</li>\n                      <li>2. Colors defined in the CSS</li>\n                    </ul>\n                    <ul className=\"nav-section-flex\">\n                      <a href=\"#js\" className=\"is-size-5 nav-link\">JS</a>\n                    </ul>\n                    <ul className=\"nav-section-flex\">\n                      <a href=\"#performance\" className=\"is-size-5 nav-link\">Performance</a>\n                    </ul>\n                  </div>\n\n                </li> */}\n                          <a href=\"#html\" className=\"is-size-5 nav-link\" onClick={ () => this.setState({navSectionActive: 'html'})}>HTML</a>\n                          <li className={`nav-section ${this.state.navSectionActive !== 'html' ? 'collapsed' : ''}`}>\n\n                            <ul>\n                              <li><a href=\"#tag-frequency\" className=\"is-size-6 nav-link\">1. Tag frequency</a></li>\n                              <li><a href=\"#attribute-frequency\" className=\"is-size-6 nav-link\">2. Attribute frequency</a></li>\n                            </ul>\n                          </li>\n                          <a href=\"#css\" className=\"is-size-5 nav-link\" onClick={ () => this.setState({navSectionActive: 'css'})}>CSS</a>\n                          <li className={`nav-section ${this.state.navSectionActive !== 'css' ? 'collapsed' : ''}`}>\n\n                            <ul>\n                              <li><a href=\"#color-detection\" className=\"is-size-6 nav-link\">1. Color detection</a></li>\n                              <li><a href=\"#color-defined-in-css\" className=\"is-size-6 nav-link\">2. Colors defined in the CSS</a></li>\n                            </ul>\n                          </li>\n                          <a href=\"#js\" className=\"is-size-5 nav-link\" onClick={ () => this.setState({navSectionActive: 'js'})}>JS</a>\n                          <br></br>\n                          {/* <li className={`nav-section ${this.state.navSectionActive !== 'js' ? 'collapsed' : ''}`}>\n                            <ul>\n                              <li>\n                                <a href=\"#js-technologies\" className=\"is-size-6 nav-link\">1. Technologies</a>\n                              </li>\n                            </ul>\n\n                          </li> */}\n                          <a href=\"#performance\" className=\"is-size-5 nav-link\" onClick={ () => this.setState({navSectionActive: 'performance'})}>Performance</a>\n                          <li className={`nav-section ${this.state.navSectionActive !== 'performance' ? 'collapsed' : ''}`}>\n\n                            <ul>\n                              <li>\n                                <a href=\"#lighthouse\" className=\"is-size-6 nav-link\">1. Lighthouse report</a>\n                              </li>\n\n                            </ul>\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                    : null\n                }\n\n                <div className=\"column is-three-quarters has-text-centered\">\n                  <div className=\"columns is-vcentered is-centered is-multiline stats-container\">\n                    {\n                      this.state.submitted\n                        ? this.state.domain && this.state.htmlStats ? <h3 className=\"title is-3\" id=\"html\">HTML</h3> : null\n                        : null\n                    }\n                    {/* <div className=\"column is-full has-text-centered stat-separator\"> </div> */}\n                    {/* <br></br> */}\n                    <div className=\"column is-full has-text-centered stat-element\">\n                      {\n                        this.state.submitted\n                          ? this.state.domain && this.state.htmlStats\n                            ? <span>The website containts a total of <b>{ Object.keys(this.state.htmlRawData).reduce((prev, curr) => prev + this.state.htmlRawData[curr].count || 0, 0)}</b> DOM elements.</span>\n                            : null\n                          : null\n\n                      }\n                    </div>\n                    <div className=\"column is-full has-text-centered stat-element\">\n                      {/* TODO: add error handling */}\n                      { this.state.submitted\n                        ? this.state.domain && this.state.htmlStatsLoading ? <Loading/> : <HorizontalBarChart title=\"Tag frequency\" data={ this.state.htmlStats }/>\n                        : null\n                      }\n                    </div>\n\n                    <div className=\"column is-full has-text-centered stat-element\">\n                      {\n                        this.state.submitted\n                          ? this.state.domain && this.state.htmlAttributesData ? <HorizontalBarChart title=\"Attribute frequency\" data={ this.state.htmlAttributesData }/> : null\n                          : null\n                      }\n                      {\n                        this.state.submitted\n                          ?\n                          this.state.domain && this.state.htmlRawData\n                            ? <select onChange={ e => this.handleAttributesDropdownChange(e)}>\n                              <option value=\"all\">all</option>\n                              {\n                                Object.keys(this.state.htmlRawData).filter(key => this.state.htmlRawData[key] && this.state.htmlRawData[key].attributes && Object.keys(this.state.htmlRawData[key].attributes).length !== 0).map(key => <option value={key}> {`${key} (${Object.keys(this.state.htmlRawData[key].attributes).length})`} </option>)\n                              }</select>\n                            : null\n                          : null\n                      }\n                    </div>\n\n                    <div className=\"column is-full has-text-centered stat-separator\"> </div>\n                    {\n                      this.state.submitted\n                        ? this.state.domain && (this.state.colorData || this.state.colorBarData) ? <h3 className=\"title is-3\" id=\"css\">CSS</h3> : null\n                        : null\n                    }\n\n                    <div className=\"column is-full has-text-centered stat-element\">\n                      {/* { console.log('/////', this.state.cssStats && this.state.cssStats['stylesheets.filesize.uncompressed'])} */}\n                      {\n                        this.state.submitted ? this.state.domain && this.state.cssStats\n                          ? <span>The uncompressed amount of CSS present on the website is { Math.round(this.state.cssStats['stylesheets.filesize.uncompressed.totalBytes'] / 1000)}kb ({ Math.round(this.state.cssStats['stylesheets.filesize.compressed.gzip.totalBytes'] / 1000)}kb gzipped).</span>\n                          : null\n                          : null\n                      }\n                    </div>\n\n                    <div className=\"column is-full has-text-centered stat-element\">\n                      { this.state.submitted\n                        ? this.state.domain && this.state.colorDataLoading ? <Loading/> : <TreeMap data={ this.state.colorData } title=\"Predominant colors\"></TreeMap>\n                        : null\n                      }\n                    </div>\n\n                    <div className=\"column is-full has-text-centered stat-element\">\n                      {/* {\n                        this.state.submitted\n                          ? this.state.domain && this.state.colorBarData\n                            ? <span>There were detected {this.state.colorBarData.length} colors among all the stylesheet files referenced on this website.</span>\n                            : null\n                          : null\n                      } */}\n                      { this.state.submitted\n                        ? this.state.domain && this.state.colorBarLoading ? <Loading/> : <ColorBar title=\"Colors defined in the CSS\" data={ this.state.colorBarData }></ColorBar>\n                        : null\n                      }\n                    </div>\n                    <div className=\"column is-full has-text-centered stat-element\">\n                      <a href={`https://www.projectwallace.com/analyze-css?url=${this.state.domain}`} target=\"_blank\">View Project Wallace report</a> | <a href={`https://www.cssstats.com/stats?url=${this.state.domain}`} target=\"_blank\">View CSSStats report</a>\n                    </div>\n\n                    <div className=\"column is-full has-text-centered stat-separator\"> </div>\n\n                    {\n                      this.state.submitted\n                        ? this.state.domain && this.state.lighthouseReport ? <h3 className=\"title is-3\" id=\"js\">JS</h3> : null\n                        : null\n                    }\n\n                    <div className=\"column is-full has-text-centered stat-element\">\n                      { this.state.submitted\n                        ? this.state.domain && this.state.lighthouseReport\n                          ? <span>The total number of transfered bytes for scripts is {Math.round(this.state.lighthouseReport.audits['resource-summary'].details.items.find(e => e.resourceType === 'script').size / 1000)}kb.</span>\n                          : null\n                        : null\n                      }\n                    </div>\n                    {/* <div className=\"column is-full has-text-centered stat-element\">\n                      { this.state.submitted\n                        ? this.state.domain && this.state.technologiesLoading\n                          ? <Loading/>\n                          : this.state.technologies\n                            ? <div><p className=\"subtitle is-4\"> The website is using {this.state.technologies.join(', ')}</p></div>\n                            : 'there was an error'\n                        : null\n                      }\n                    </div> */}\n\n                    {\n                      this.state.submitted\n                        ? this.state.domain && this.state.lighthouseReport ? <h3 className=\"title is-3\" id=\"performance\">Performance</h3> : null\n                        : null\n                    }\n\n                    <div className=\"column is-full has-text-centered stat-element\">\n                      { this.state.submitted\n                        ? this.state.domain && this.state.lighthouseReportLoading\n                          ? <Loading/>\n                          : this.state.lighthouseReport\n                            ? <LighthouseReport data={this.state.lighthouseReport} lighthouseReportURL={this.state.lighthouseReportURL}></LighthouseReport>\n                            : 'there was an error'\n                        : null\n                      }\n                    </div>\n                    {/* <div className=\"column is-full has-text-centered stat-element\">\n                      { this.state.submitted\n                        ? this.state.domain && this.state.alexaRankLoading ? <Loading/> : <div><h4 className=\"title is-4\">Alexa Rank</h4><h3 className=\"title is-3\">#{this.state.alexaRank}</h3></div>\n                        : null\n                      }\n                    </div> */}\n                  </div>\n                </div>\n              </div>\n            </div>\n            : null\n        }\n      </div>\n    </Layout>;\n  }\n}\n\nexport default withRouter(Analyze);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AALA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAQA;AARA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAaA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AACA;AAgBA;AACA;AACA;AA/BA;AA+BA;AACA;;;;;;;;;;;;;;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxCA;AA2CA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;;;;AAxdA;AACA;AA0dA;;;;A","sourceRoot":""}